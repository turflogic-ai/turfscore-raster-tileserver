---
- name: Setup Linode server
  hosts: all
  become: true
  gather_facts: false
  tasks:
    # Bootstrap Python 3, pip, and python3-six are installed
    - name: Ensure Python 3, pip, and python3-six are installed
      raw: |
        apt update &&
        apt install -y python3 python3-pip python3-six

    # Gather facts after Python/bootstrap ready
    - name: Gather facts after Python/bootstrap ready
      setup:

    # Update package cache first
    - name: Update apt cache
      apt:
        update_cache: true

    # Upgrade packages separately
    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: true

    # Set hostname
    - name: Set hostname
      hostname:
        name: '{{ hostname }}'

    # Set timezone
    - name: Set timezone to UTC
      timezone:
        name: '{{ timezone }}'

    # Disable password authentication
    - name: Disable password authentication in SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PasswordAuthentication\s+'
        line: 'PasswordAuthentication no'
        state: present
      notify: restart ssh

    # Install essential system packages
    - name: Install essential system packages
      apt:
        name:
          - fail2ban
          - unattended-upgrades
          - htop
          - vim
          - logrotate
        state: present

    # Configure UFW firewall
    - name: Reset UFW to default state
      ufw:
        state: reset

    - name: Set UFW default policies
      ufw:
        direction: '{{ item.direction }}'
        policy: '{{ item.policy }}'
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }

    - name: Configure UFW firewall rules
      ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
      loop:
        - 22
        - 80
        - 443
      register: ufw_rules
      failed_when: false # Don't fail if rules already exist

    - name: Enable UFW firewall
      ufw:
        state: enabled

    # Configure unattended-upgrades for automatic security updates
    - name: Configure unattended-upgrades
      copy:
        content: |
          Unattended-Upgrade::Automatic-Reboot "false";
          Unattended-Upgrade::Automatic-Reboot-Time "02:00";
          Unattended-Upgrade::Mail "root";
          Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot-WithUsers "false";
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        mode: '0644'

    # Configure fail2ban for better security
    - name: Configure fail2ban custom settings
      copy:
        content: |
          [DEFAULT]
          bantime = 3600
          findtime = 600
          maxretry = 3

          [sshd]
          enabled = true
          maxretry = 3
          bantime = 3600

          [nginx-http-auth]
          enabled = true
          maxretry = 3
          bantime = 3600
        dest: /etc/fail2ban/jail.d/custom.conf
        mode: '0644'
      notify: restart fail2ban

    # Create user account (locked for SSH-only access)
    - name: Create user account
      user:
        name: '{{ webapp_user }}'
        shell: /bin/bash
        groups: sudo
        append: true
        create_home: true
        password: '!' # Lock account - SSH key access only

    # Set proper home directory permissions
    - name: Set user home directory permissions
      file:
        path: '/home/{{ webapp_user }}'
        owner: '{{ webapp_user }}'
        group: '{{ webapp_user }}'
        mode: '0750'

    # Create .ssh directory
    - name: Create .ssh directory for user
      file:
        path: '/home/{{ webapp_user }}/.ssh'
        state: directory
        mode: '0700'
        owner: '{{ webapp_user }}'
        group: '{{ webapp_user }}'

    # Copy authorized_keys (with existence check)
    - name: Check if root authorized_keys exists
      stat:
        path: /root/.ssh/authorized_keys
      register: root_ssh_keys

    - name: Copy authorized_keys from root to user
      copy:
        src: /root/.ssh/authorized_keys
        dest: '/home/{{ webapp_user }}/.ssh/authorized_keys'
        owner: '{{ webapp_user }}'
        group: '{{ webapp_user }}'
        mode: '0600'
        remote_src: true
      when: root_ssh_keys.stat.exists

    # Create sudoers file
    - name: Create sudoers override file
      copy:
        content: '{{ webapp_user }} ALL=(ALL) NOPASSWD:ALL'
        dest: '/etc/sudoers.d/{{ webapp_user }}'
        mode: '0440'
        validate: 'visudo -cf %s'

    # Ensure SSH restart happens before user verification
    - name: Flush handlers
      meta: flush_handlers

    # Verify user setup
    - name: Verify user exists and has sudo access
      command: id {{ webapp_user }}
      register: user_check
      changed_when: false

    - name: Display user information
      debug:
        var: user_check.stdout

    # Configure logrotate for better log management
    - name: Configure logrotate for system logs
      copy:
        content: |
          /var/log/*.log {
              daily
              missingok
              rotate 7
              compress
              delaycompress
              notifempty
              create 644 root root
          }
        dest: /etc/logrotate.d/system-logs
        mode: '0644'

    # Reboot to apply all changes (including kernel updates)
    - name: Reboot system
      reboot:
        msg: 'Rebooting after complete setup'
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 5
        post_reboot_delay: 30
        test_command: 'ping -c 1 127.0.0.1'

  handlers:
    - name: restart ssh
      service:
        name: ssh
        state: restarted

    - name: restart fail2ban
      service:
        name: fail2ban
        state: restarted
